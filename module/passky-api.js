// src/errors.ts
var Error2;
((Error3) => {
  Error3[Error3["SUCCESS"] = 0] = "SUCCESS";
  Error3[Error3["INVALID_USERNAME"] = 1] = "INVALID_USERNAME";
  Error3[Error3["INVALID_PASSWORD"] = 2] = "INVALID_PASSWORD";
  Error3[Error3["DATABASE_INSERT_ERROR"] = 3] = "DATABASE_INSERT_ERROR";
  Error3[Error3["USERNAME_ALREADY_REGISTERED"] = 4] = "USERNAME_ALREADY_REGISTERED";
  Error3[Error3["WEAK_PASSWORD"] = 5] = "WEAK_PASSWORD";
  Error3[Error3["INVALID_EMAIL"] = 6] = "INVALID_EMAIL";
  Error3[Error3["USERNAME_NOT_FOUND"] = 7] = "USERNAME_NOT_FOUND";
  Error3[Error3["NO_SAVED_PASSWORDS"] = 8] = "NO_SAVED_PASSWORDS";
  Error3[Error3["INVALID_DOMAIN"] = 9] = "INVALID_DOMAIN";
  Error3[Error3["PASSWORD_NOT_OWNED_BY_USER"] = 10] = "PASSWORD_NOT_OWNED_BY_USER";
  Error3[Error3["DATABASE_DELETE_ERROR"] = 11] = "DATABASE_DELETE_ERROR";
  Error3[Error3["INVALID_USERNAME_FORMAT"] = 12] = "INVALID_USERNAME_FORMAT";
  Error3[Error3["DATABASE_UPDATE_ERROR"] = 13] = "DATABASE_UPDATE_ERROR";
  Error3[Error3["INVALID_JSON"] = 14] = "INVALID_JSON";
  Error3[Error3["SERVER_CAPACITY_REACHED"] = 15] = "SERVER_CAPACITY_REACHED";
  Error3[Error3["MAXIMUM_PASSWORD_LIMIT"] = 16] = "MAXIMUM_PASSWORD_LIMIT";
  Error3[Error3["EMAIL_NOT_FOUND"] = 17] = "EMAIL_NOT_FOUND";
  Error3[Error3["MESSAGE_TOO_LONG"] = 18] = "MESSAGE_TOO_LONG";
  Error3[Error3["INVALID_OTP"] = 19] = "INVALID_OTP";
  Error3[Error3["MAX_YUBIKEYS_LINKED"] = 20] = "MAX_YUBIKEYS_LINKED";
  Error3[Error3["YUBIKEY_ALREADY_LINKED"] = 21] = "YUBIKEY_ALREADY_LINKED";
  Error3[Error3["INVALID_YUBIKEY_OTP"] = 23] = "INVALID_YUBIKEY_OTP";
  Error3[Error3["YUBIKEY_NOT_LINKED"] = 24] = "YUBIKEY_NOT_LINKED";
  Error3[Error3["INVALID_OR_EXPIRED_TOKEN"] = 25] = "INVALID_OR_EXPIRED_TOKEN";
  Error3[Error3["TWO_FACTOR_ALREADY_ENABLED"] = 26] = "TWO_FACTOR_ALREADY_ENABLED";
  Error3[Error3["TWO_FACTOR_NOT_ENABLED"] = 27] = "TWO_FACTOR_NOT_ENABLED";
  Error3[Error3["MAIL_NOT_ENABLED"] = 28] = "MAIL_NOT_ENABLED";
  Error3[Error3["INVALID_LICENSE_KEY"] = 29] = "INVALID_LICENSE_KEY";
  Error3[Error3["LICENSE_KEY_ALREADY_USED"] = 30] = "LICENSE_KEY_ALREADY_USED";
  Error3[Error3["WEBSITE_TOO_LONG"] = 300] = "WEBSITE_TOO_LONG";
  Error3[Error3["USERNAME_TOO_LONG"] = 301] = "USERNAME_TOO_LONG";
  Error3[Error3["PASSWORD_TOO_LONG"] = 302] = "PASSWORD_TOO_LONG";
  Error3[Error3["MESSAGE_TOO_LONG_DUPLICATE"] = 303] = "MESSAGE_TOO_LONG_DUPLICATE";
  Error3[Error3["ACTION_NOT_PROVIDED"] = 400] = "ACTION_NOT_PROVIDED";
  Error3[Error3["INVALID_ACTION"] = 401] = "INVALID_ACTION";
  Error3[Error3["MISSING_REQUIRED_POST_VALUES"] = 403] = "MISSING_REQUIRED_POST_VALUES";
  Error3[Error3["API_CONNECTION_ERROR"] = 404] = "API_CONNECTION_ERROR";
  Error3[Error3["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
  Error3[Error3["DATABASE_CONNECTION_ERROR"] = 505] = "DATABASE_CONNECTION_ERROR";
  Error3[Error3["MAIL_SERVER_CONNECTION_ERROR"] = 506] = "MAIL_SERVER_CONNECTION_ERROR";
  Error3[Error3["UNAUTHORIZED_ENDPOINT_ACCESS"] = 999] = "UNAUTHORIZED_ENDPOINT_ACCESS";
  Error3[Error3["SERVER_UNREACHABLE"] = 1000] = "SERVER_UNREACHABLE";
  Error3[Error3["INVALID_RESPONSE_FORMAT"] = 1001] = "INVALID_RESPONSE_FORMAT";
  Error3[Error3["INVALID_HASH"] = 1002] = "INVALID_HASH";
  Error3[Error3["UNKNOWN_ERROR"] = 1001] = "UNKNOWN_ERROR";
})(Error2 ||= {});
var Errors;
((Errors) => {
  Errors.list = {
    0: "Successful",
    1: "Username is invalid!",
    2: "Password is incorrect!",
    3: "Something went wrong while inserting data to the database!",
    4: "Username is already registered!",
    5: "Your password is too weak!",
    6: "Email is invalid!",
    7: "Username does not exist!",
    8: "You don't have any saved passwords.",
    9: "Domain is invalid!",
    10: "User does not own this password!",
    11: "Something went wrong while deleting data from database!",
    12: "Username must be 6 to 30 characters long, and may only contain letters, numbers and dots!",
    13: "Something went wrong while updating data in database!",
    14: "Json is invalid!",
    15: "This server cannot accept more users!",
    16: "You have reached the maximum amount of stored passwords!",
    17: "Account with this email doesn't exist!",
    18: "Message is too long!",
    19: "OTP is incorrect!",
    20: "You can only link up to 5 Yubikeys!",
    21: "This Yubikey is already linked with your account.",
    23: "Provided Yubikey OTP is invalid!",
    24: "Yubikey with provided ID isn't linked to your account.",
    25: "The token is incorrect or it has expired. Please Sign in again.",
    26: "Two-factor authentication is already enabled.",
    27: "Two-factor authentication is not enabled.",
    28: "Mail is not enabled on this server.",
    29: "License key is invalid!",
    30: "This license key has already been used.",
    300: "Website is too long!",
    301: "Username is too long!",
    302: "Password is too long!",
    303: "Message is too long!",
    400: "Action was not provided in GET!",
    401: "Action is invalid!",
    403: "You didn't provide all required values in POST.",
    404: "Can't connect into API.",
    429: "You are sending too many requests! Please wait before executing this action again.",
    505: "Something went wrong while connecting to the database!",
    506: "Something went wrong while connecting to the mail server!",
    999: "You do NOT have permission to use this endpoint.",
    1000: "Server is unreachable!",
    1001: "Something went wrong while trying to perform this action. Please try again later.",
    1002: "Invalid hash provided!"
  };
  function get(id) {
    return Errors.list[id];
  }
  Errors.get = get;
  function getJson(id) {
    return { error: id, info: Errors.list[id] };
  }
  Errors.getJson = getJson;
})(Errors ||= {});
var errors_default = Errors;

// src/validate.ts
var Validate;
((Validate) => {
  function username(username2) {
    return /^[a-z0-9._]{6,30}$/i.test(username2);
  }
  Validate.username = username;
  function password(password2) {
    return password2.length >= 8;
  }
  Validate.password = password;
  function hash(hash2) {
    return hash2.length === 128;
  }
  Validate.hash = hash;
  function url(url2) {
    return !/\s/.test(url2);
  }
  Validate.url = url;
  function email(email2) {
    return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$/i.test(email2);
  }
  Validate.email = email;
  function otp(otp2) {
    if (otp2 == null)
      return false;
    return otp2.length == 0 || otp2.length == 6 || otp2.length == 44;
  }
  Validate.otp = otp;
  function token(token2) {
    return /^[a-z0-9]{64}$/i.test(token2);
  }
  Validate.token = token;
  function passwordWebsite(website) {
    return website.length >= 2 && website.length <= 100;
  }
  Validate.passwordWebsite = passwordWebsite;
  function passwordUsername(username2) {
    return username2.length >= 2 && username2.length <= 100;
  }
  Validate.passwordUsername = passwordUsername;
  function passwordPassword(password2) {
    return password2.length >= 2 && password2.length <= 100;
  }
  Validate.passwordPassword = passwordPassword;
  function passwordMessage(message) {
    return message.length >= 0 && message.length <= 5000;
  }
  Validate.passwordMessage = passwordMessage;
  function positiveInteger(number) {
    if (typeof number == "undefined" || number == null)
      return false;
    return number >>> 0 === parseFloat(number);
  }
  Validate.positiveInteger = positiveInteger;
  function yubiKey(id) {
    return id.length == 44;
  }
  Validate.yubiKey = yubiKey;
  function license(license2) {
    return license2.length == 29;
  }
  Validate.license = license;
  function json(json2) {
    try {
      JSON.parse(json2);
      return true;
    } catch {
    }
    return false;
  }
  Validate.json = json;
  function response(response2) {
    return typeof response2.error === "number" && typeof response2.info === "string";
  }
  Validate.response = response;
})(Validate ||= {});
var validate_default = Validate;

// node_modules/@rabbit-company/blake2b/src/blake2b.js
var Blake2b;
(function(Blake2b2) {
  const v = new Uint32Array(32);
  const m = new Uint32Array(32);
  const BLAKE2B_IV32 = new Uint32Array([
    4089235720,
    1779033703,
    2227873595,
    3144134277,
    4271175723,
    1013904242,
    1595750129,
    2773480762,
    2917565137,
    1359893119,
    725511199,
    2600822924,
    4215389547,
    528734635,
    327033209,
    1541459225
  ]);
  const SIGMA8 = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3,
    11,
    8,
    12,
    0,
    5,
    2,
    15,
    13,
    10,
    14,
    3,
    6,
    7,
    1,
    9,
    4,
    7,
    9,
    3,
    1,
    13,
    12,
    11,
    14,
    2,
    6,
    5,
    10,
    4,
    0,
    15,
    8,
    9,
    0,
    5,
    7,
    2,
    4,
    10,
    15,
    14,
    1,
    11,
    12,
    6,
    8,
    3,
    13,
    2,
    12,
    6,
    10,
    0,
    11,
    8,
    3,
    4,
    13,
    7,
    5,
    15,
    14,
    1,
    9,
    12,
    5,
    1,
    15,
    14,
    13,
    4,
    10,
    0,
    7,
    6,
    3,
    9,
    2,
    8,
    11,
    13,
    11,
    7,
    14,
    12,
    1,
    3,
    9,
    5,
    0,
    15,
    4,
    8,
    6,
    2,
    10,
    6,
    15,
    14,
    9,
    11,
    3,
    0,
    8,
    12,
    2,
    13,
    7,
    1,
    4,
    10,
    5,
    10,
    2,
    8,
    4,
    7,
    6,
    1,
    5,
    15,
    11,
    9,
    14,
    3,
    12,
    13,
    0,
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    14,
    10,
    4,
    8,
    9,
    15,
    13,
    6,
    1,
    12,
    0,
    2,
    11,
    7,
    5,
    3
  ];
  const parameterBlock = new Uint8Array(64).fill(0);
  const SIGMA82 = new Uint8Array(SIGMA8.map(function(x) {
    return x * 2;
  }));
  function ADD64AA(v2, a, b) {
    const o0 = v2[a] + v2[b];
    let o1 = v2[a + 1] + v2[b + 1];
    if (o0 >= 4294967296)
      o1++;
    v2[a] = o0;
    v2[a + 1] = o1;
  }
  function ADD64AC(v2, a, b0, b1) {
    let o0 = v2[a] + b0;
    if (b0 < 0)
      o0 += 4294967296;
    let o1 = v2[a + 1] + b1;
    if (o0 >= 4294967296)
      o1++;
    v2[a] = o0;
    v2[a + 1] = o1;
  }
  function B2B_GET32(arr, i) {
    return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;
  }
  function B2B_G(a, b, c, d, ix, iy) {
    const x0 = m[ix];
    const x1 = m[ix + 1];
    const y0 = m[iy];
    const y1 = m[iy + 1];
    ADD64AA(v, a, b);
    ADD64AC(v, a, x0, x1);
    let xor0 = v[d] ^ v[a];
    let xor1 = v[d + 1] ^ v[a + 1];
    v[d] = xor1;
    v[d + 1] = xor0;
    ADD64AA(v, c, d);
    xor0 = v[b] ^ v[c];
    xor1 = v[b + 1] ^ v[c + 1];
    v[b] = xor0 >>> 24 ^ xor1 << 8;
    v[b + 1] = xor1 >>> 24 ^ xor0 << 8;
    ADD64AA(v, a, b);
    ADD64AC(v, a, y0, y1);
    xor0 = v[d] ^ v[a];
    xor1 = v[d + 1] ^ v[a + 1];
    v[d] = xor0 >>> 16 ^ xor1 << 16;
    v[d + 1] = xor1 >>> 16 ^ xor0 << 16;
    ADD64AA(v, c, d);
    xor0 = v[b] ^ v[c];
    xor1 = v[b + 1] ^ v[c + 1];
    v[b] = xor1 >>> 31 ^ xor0 << 1;
    v[b + 1] = xor0 >>> 31 ^ xor1 << 1;
  }
  function blake2bCompress(ctx, last) {
    let i = 0;
    for (i = 0;i < 16; i++) {
      v[i] = ctx.h[i];
      v[i + 16] = BLAKE2B_IV32[i];
    }
    v[24] = v[24] ^ ctx.t;
    v[25] = v[25] ^ ctx.t / 4294967296;
    if (last) {
      v[28] = ~v[28];
      v[29] = ~v[29];
    }
    for (i = 0;i < 32; i++) {
      m[i] = B2B_GET32(ctx.b, 4 * i);
    }
    for (i = 0;i < 12; i++) {
      B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
      B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
      B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
      B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
      B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
      B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
      B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
      B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
    }
    for (i = 0;i < 16; i++) {
      ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
    }
  }
  function blake2bInit(outlen, key, salt, personal) {
    if (outlen === 0 || outlen > 64) {
      throw new Error("Illegal output length, expected 0 < length <= 64");
    }
    if (key && key.length > 64) {
      throw new Error("Illegal key, expected Uint8Array with 0 < length <= 64");
    }
    if (salt && salt.length !== 16) {
      throw new Error("Illegal salt, expected Uint8Array with length is 16");
    }
    if (personal && personal.length !== 16) {
      throw new Error("Illegal personal, expected Uint8Array with length is 16");
    }
    const ctx = {
      b: new Uint8Array(128),
      h: new Uint32Array(16),
      t: 0,
      c: 0,
      outlen
    };
    parameterBlock.fill(0);
    parameterBlock[0] = outlen;
    if (key)
      parameterBlock[1] = key.length;
    parameterBlock[2] = 1;
    parameterBlock[3] = 1;
    if (salt)
      parameterBlock.set(salt, 32);
    if (personal)
      parameterBlock.set(personal, 48);
    for (let i = 0;i < 16; i++) {
      ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4);
    }
    if (key) {
      blake2bUpdate(ctx, key);
      ctx.c = 128;
    }
    return ctx;
  }
  function blake2bUpdate(ctx, input) {
    for (let i = 0;i < input.length; i++) {
      if (ctx.c === 128) {
        ctx.t += ctx.c;
        blake2bCompress(ctx, false);
        ctx.c = 0;
      }
      ctx.b[ctx.c++] = input[i];
    }
  }
  function blake2bFinal(ctx) {
    ctx.t += ctx.c;
    while (ctx.c < 128) {
      ctx.b[ctx.c++] = 0;
    }
    blake2bCompress(ctx, true);
    const out = new Uint8Array(ctx.outlen);
    for (let i = 0;i < ctx.outlen; i++) {
      out[i] = ctx.h[i >> 2] >> 8 * (i & 3);
    }
    return out;
  }
  function blake2bStart(input, key, outlen, salt, personal) {
    outlen = outlen || 64;
    const ctx = blake2bInit(outlen, key, normalizeInput(salt), normalizeInput(personal));
    blake2bUpdate(ctx, normalizeInput(input));
    return blake2bFinal(ctx);
  }
  function normalizeInput(input) {
    let ret;
    if (input instanceof Uint8Array) {
      ret = input;
    } else if (typeof input === "string") {
      const encoder = new TextEncoder;
      ret = encoder.encode(input);
    } else {
      throw new Error("Input must be an string, Buffer or Uint8Array");
    }
    return ret;
  }
  function toHex(bytes) {
    return Array.prototype.map.call(bytes, function(n) {
      return (n < 16 ? "0" : "") + n.toString(16);
    }).join("");
  }
  function hash(message = "", secret = undefined, length = 64, salt = new Uint8Array(16), personal = new Uint8Array(16)) {
    if (secret?.length === 0)
      secret = undefined;
    if (typeof secret === "string")
      secret = new TextEncoder().encode(secret);
    const output = blake2bStart(message, secret, length, salt, personal);
    return toHex(output);
  }
  Blake2b2.hash = hash;
})(Blake2b || (Blake2b = {}));
var blake2b_default = Blake2b;

// node_modules/@rabbit-company/argon2id/src/argon2id_wasm.js
var wasm;
var base64Wasm = "";
var cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : {
  decode: () => {
    throw Error("TextDecoder not available");
  }
};
if (typeof TextDecoder !== "undefined") {
  cachedTextDecoder.decode();
}
var cachedUint8Memory0 = null;
function getUint8Memory0() {
  if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
    cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
  }
  return cachedUint8Memory0;
}
function getStringFromWasm0(ptr, len) {
  ptr = ptr >>> 0;
  return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}
var heap = new Array(128).fill(undefined);
heap.push(undefined, null, true, false);
var heap_next = heap.length;
function addHeapObject(obj) {
  if (heap_next === heap.length)
    heap.push(heap.length + 1);
  const idx = heap_next;
  heap_next = heap[idx];
  heap[idx] = obj;
  return idx;
}
var WASM_VECTOR_LEN = 0;
var cachedTextEncoder = typeof TextEncoder !== "undefined" ? new TextEncoder("utf-8") : {
  encode: () => {
    throw Error("TextEncoder not available");
  }
};
var encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
  return cachedTextEncoder.encodeInto(arg, view);
} : function(arg, view) {
  const buf = cachedTextEncoder.encode(arg);
  view.set(buf);
  return {
    read: arg.length,
    written: buf.length
  };
};
function passStringToWasm0(arg, malloc, realloc) {
  if (realloc === undefined) {
    const buf = cachedTextEncoder.encode(arg);
    const ptr2 = malloc(buf.length, 1) >>> 0;
    getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);
    WASM_VECTOR_LEN = buf.length;
    return ptr2;
  }
  let len = arg.length;
  let ptr = malloc(len, 1) >>> 0;
  const mem = getUint8Memory0();
  let offset = 0;
  for (;offset < len; offset++) {
    const code = arg.charCodeAt(offset);
    if (code > 127)
      break;
    mem[ptr + offset] = code;
  }
  if (offset !== len) {
    if (offset !== 0) {
      arg = arg.slice(offset);
    }
    ptr = realloc(ptr, len, len = offset + arg.length * 3, 1) >>> 0;
    const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
    const ret = encodeString(arg, view);
    offset += ret.written;
  }
  WASM_VECTOR_LEN = offset;
  return ptr;
}
var cachedInt32Memory0 = null;
function getInt32Memory0() {
  if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {
    cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
  }
  return cachedInt32Memory0;
}
function getObject(idx) {
  return heap[idx];
}
function dropObject(idx) {
  if (idx < 132)
    return;
  heap[idx] = heap_next;
  heap_next = idx;
}
function takeObject(idx) {
  const ret = getObject(idx);
  dropObject(idx);
  return ret;
}
function argon2id_hash(message, salt, parallelism, memory, iterations, length) {
  let deferred4_0;
  let deferred4_1;
  try {
    const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
    const ptr0 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len0 = WASM_VECTOR_LEN;
    const ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    const len1 = WASM_VECTOR_LEN;
    wasm.argon2id_hash(retptr, ptr0, len0, ptr1, len1, parallelism, memory, iterations, length);
    var r0 = getInt32Memory0()[retptr / 4 + 0];
    var r1 = getInt32Memory0()[retptr / 4 + 1];
    var r2 = getInt32Memory0()[retptr / 4 + 2];
    var r3 = getInt32Memory0()[retptr / 4 + 3];
    var ptr3 = r0;
    var len3 = r1;
    if (r3) {
      ptr3 = 0;
      len3 = 0;
      throw takeObject(r2);
    }
    deferred4_0 = ptr3;
    deferred4_1 = len3;
    return getStringFromWasm0(ptr3, len3);
  } finally {
    wasm.__wbindgen_add_to_stack_pointer(16);
    wasm.__wbindgen_free(deferred4_0, deferred4_1, 1);
  }
}
async function __wbg_load(module, imports) {
  if (typeof Response === "function" && module instanceof Response) {
    if (typeof WebAssembly.instantiateStreaming === "function") {
      try {
        return await WebAssembly.instantiateStreaming(module, imports);
      } catch (e) {
        if (module.headers.get("Content-Type") != "application/wasm") {
          console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);
        } else {
          throw e;
        }
      }
    }
    const bytes = await module.arrayBuffer();
    return await WebAssembly.instantiate(bytes, imports);
  } else {
    const instance = await WebAssembly.instantiate(module, imports);
    if (instance instanceof WebAssembly.Instance) {
      return { instance, module };
    } else {
      return instance;
    }
  }
}
function __wbg_get_imports() {
  const imports = {};
  imports.wbg = {};
  imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
    const ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
  };
  return imports;
}
function __wbg_init_memory(imports, maybe_memory) {
}
function __wbg_finalize_init(instance, module) {
  wasm = instance.exports;
  __wbg_init.__wbindgen_wasm_module = module;
  cachedInt32Memory0 = null;
  cachedUint8Memory0 = null;
  return wasm;
}
async function __wbg_init(input) {
  if (wasm !== undefined)
    return wasm;
  if (typeof input === "undefined") {
    input = new URL("argon2id_wasm_bg.wasm", import.meta.url);
  }
  const imports = __wbg_get_imports();
  try {
    if (typeof input === "string" || typeof Request === "function" && input instanceof Request || typeof URL === "function" && input instanceof URL) {
      input = fetch(input);
    }
    __wbg_init_memory(imports);
    const { instance, module } = await __wbg_load(await input, imports);
    return __wbg_finalize_init(instance, module);
  } catch {
    const binary = Uint8Array.from(atob(base64Wasm), (c) => c.charCodeAt(0));
    const { instance, module } = await WebAssembly.instantiate(binary.buffer, imports);
    return __wbg_finalize_init(instance, module);
  }
}
var argon2id_wasm_default = __wbg_init;

// node_modules/@rabbit-company/argon2id/src/argon2id.js
var Argon2id;
(function(Argon2id2) {
  function hexToBase64(hexstring) {
    return btoa((hexstring.match(/\w{2}/g) || []).map(function(a) {
      return String.fromCharCode(parseInt(a, 16));
    }).join(""));
  }
  Argon2id2.hexToBase64 = hexToBase64;
  function base64ToHex(str) {
    const raw = atob(str);
    let result = "";
    for (let i = 0;i < raw.length; i++) {
      const hex = raw.charCodeAt(i).toString(16);
      result += hex.length === 2 ? hex : "0" + hex;
    }
    return result.toUpperCase();
  }
  Argon2id2.base64ToHex = base64ToHex;
  function randRange(min, max) {
    var range = max - min;
    var requestBytes = Math.ceil(Math.log2(range) / 8);
    if (!requestBytes)
      return min;
    var maxNum = Math.pow(256, requestBytes);
    var ar = new Uint8Array(requestBytes);
    while (true) {
      globalThis.crypto.getRandomValues(ar);
      var val = 0;
      for (var i = 0;i < requestBytes; i++)
        val = (val << 8) + ar[i];
      if (val < maxNum - maxNum % range)
        return min + val % range;
    }
  }
  Argon2id2.randRange = randRange;
  function randomSalt() {
    let length = 16;
    let lcase = "abcdefghijklmnopqrstuvwxyz";
    let ucase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    let numb = "1234567890";
    let salt = [];
    for (let i = 0;i < length; i++)
      salt.push(lcase.charAt(randRange(0, lcase.length)));
    for (let i = 0;i < length / 2; i++)
      salt[randRange(0, salt.length)] = ucase.charAt(randRange(0, ucase.length));
    for (let i = 0;i < length / 2; i++)
      salt[randRange(0, salt.length)] = numb.charAt(randRange(0, numb.length));
    return salt.join("");
  }
  Argon2id2.randomSalt = randomSalt;
  Argon2id2.hash = async (message, salt = Argon2id2.randomSalt(), p = 4, m = 16, t = 3, l = 32) => {
    if (m <= 20)
      m = Math.pow(2, m);
    const fallbackToWasm = async () => {
      await argon2id_wasm_default();
      return argon2id_hash(message, salt, p, m, t, l);
    };
    try {
      if (!globalThis.Worker)
        return fallbackToWasm();
      const response = await fetch("argon2id_worker.js", {
        method: "HEAD"
      });
      if (!response.ok)
        return fallbackToWasm();
      return await new Promise((resolve, reject) => {
        const Argon2idWorker = new Worker("argon2id_worker.js", {
          type: "module"
        });
        Argon2idWorker.onmessage = ({ data }) => {
          Argon2idWorker.terminate();
          data.error ? reject(data.error) : resolve(data.output);
        };
        Argon2idWorker.onerror = (error) => {
          Argon2idWorker.terminate();
          reject(`Worker error: ${error.message}`);
        };
        Argon2idWorker.postMessage([
          message,
          salt,
          p,
          m,
          t,
          l
        ]);
      });
    } catch {
      return fallbackToWasm();
    }
  };
  Argon2id2.hashEncoded = (message, salt = Argon2id2.randomSalt(), p = 4, m = 16, t = 3, l = 32) => new Promise((res, rej) => {
    if (m <= 20)
      m = Math.pow(2, m);
    Argon2id2.hash(message, salt, p, m, t, l).then((output) => {
      res(`$argon2id$v=19$m=${m},t=${t},p=${p}$${btoa(salt).replaceAll("=", "")}$${hexToBase64(output).replaceAll("=", "")}`);
    }).catch((err) => {
      rej(err);
    });
  });
  function hashDecode(hashEncoded) {
    let digest = hashEncoded.split("$")[5];
    return base64ToHex(digest).toLowerCase();
  }
  Argon2id2.hashDecode = hashDecode;
  Argon2id2.verify = (hashEncoded, message) => new Promise((res, rej) => {
    let hea = hashEncoded.split("$");
    if (hea.length != 6)
      rej("invalid hash");
    if (hea[1] != "argon2id")
      rej("unsupported algorithm");
    if (hea[2] != "v=19")
      rej("unsupported version");
    let hpa = hea[3].split(",");
    if (hpa.length != 3)
      rej("invalid hash");
    let m = parseInt(hpa[0].split("=")[1], 10);
    let t = parseInt(hpa[1].split("=")[1], 10);
    let p = parseInt(hpa[2].split("=")[1], 10);
    let salt = atob(hea[4]);
    let digest = Argon2id2.hashDecode(hashEncoded);
    Argon2id2.hash(message, salt, p, m, t, digest.length / 2).then((output) => {
      res(output === digest);
    }).catch((err) => {
      rej(err);
    });
  });
})(Argon2id || (Argon2id = {}));
var argon2id_default = Argon2id;

// node_modules/@rabbit-company/xchacha20/module/xchacha20.js
class XChaCha20 {
  keystream;
  encryptedText;
  plaintext;
  nonce;
  constructor() {
    this.keystream = [];
    this.encryptedText = [];
    this.plaintext = [];
    this.nonce = [];
  }
  rotateleft = (a, b) => {
    return a << b | a >>> 32 - b;
  };
  le32 = (a, b, c, d) => {
    return (a ^ b << 8 ^ c << 16 ^ d << 24) >>> 0;
  };
  int2(data) {
    let result = [];
    for (let i = 0;i < data.length; i++) {
      const hex = data.charCodeAt(i).toString(16);
      result.push(parseInt(hex, 16));
    }
    return result;
  }
  Qround(state, a, b, c, d) {
    state[a] += state[b];
    state[d] ^= state[a];
    state[d] = this.rotateleft(state[d], 16);
    state[c] += state[d];
    state[b] ^= state[c];
    state[b] = this.rotateleft(state[b], 12);
    state[a] += state[b];
    state[d] ^= state[a];
    state[d] = this.rotateleft(state[d], 8);
    state[c] += state[d];
    state[b] ^= state[c];
    state[b] = this.rotateleft(state[b], 7);
    state[a] >>>= 0;
    state[b] >>>= 0;
    state[c] >>>= 0;
    state[d] >>>= 0;
  }
  Inner_Block(state) {
    this.Qround(state, 0, 4, 8, 12);
    this.Qround(state, 1, 5, 9, 13);
    this.Qround(state, 2, 6, 10, 14);
    this.Qround(state, 3, 7, 11, 15);
    this.Qround(state, 0, 5, 10, 15);
    this.Qround(state, 1, 6, 11, 12);
    this.Qround(state, 2, 7, 8, 13);
    this.Qround(state, 3, 4, 9, 14);
  }
  Chacha20_BlockFunction(key, nonce, block_counter) {
    let state = [];
    state[0] = 1634760805;
    state[1] = 857760878;
    state[2] = 2036477234;
    state[3] = 1797285236;
    state[4] = this.le32(key[0], key[1], key[2], key[3]);
    state[5] = this.le32(key[4], key[5], key[6], key[7]);
    state[6] = this.le32(key[8], 9, key[10], key[11]);
    state[7] = this.le32(key[12], key[13], key[14], key[15]);
    state[8] = this.le32(key[16], key[17], 18, key[19]);
    state[9] = this.le32(key[20], key[21], 22, key[23]);
    state[10] = this.le32(key[24], key[25], key[26], key[27]);
    state[11] = this.le32(key[28], key[29], key[30], key[31]);
    state[12] = block_counter;
    state[13] = this.le32(nonce[0], nonce[1], nonce[2], nonce[3]);
    state[14] = this.le32(nonce[4], nonce[5], nonce[6], nonce[7]);
    state[15] = this.le32(nonce[8], nonce[9], nonce[10], nonce[11]);
    let temp = new Uint32Array(state.slice());
    for (let i = 1;i <= 10; i++) {
      this.Inner_Block(temp);
    }
    let Serialized_Block = [];
    for (let i = 0, i2 = 0;i < 16; i++) {
      state[i] += temp[i];
      Serialized_Block[i2++] = state[i] & 255;
      Serialized_Block[i2++] = state[i] >>> 8 & 255;
      Serialized_Block[i2++] = state[i] >>> 16 & 255;
      Serialized_Block[i2++] = state[i] >>> 24 & 255;
    }
    return Serialized_Block;
  }
  HChacha20_BlockFunction(key, nonce) {
    let state = [];
    state[0] = 1634760805;
    state[1] = 857760878;
    state[2] = 2036477234;
    state[3] = 1797285236;
    state[4] = this.le32(key[0], key[1], key[2], key[3]);
    state[5] = this.le32(key[4], key[5], key[6], key[7]);
    state[6] = this.le32(key[8], 9, key[10], key[11]);
    state[7] = this.le32(key[12], key[13], key[14], key[15]);
    state[8] = this.le32(key[16], key[17], 18, key[19]);
    state[9] = this.le32(key[20], key[21], 22, key[23]);
    state[10] = this.le32(key[24], key[25], key[26], key[27]);
    state[11] = this.le32(key[28], key[29], key[30], key[31]);
    state[12] = this.le32(nonce[0], nonce[1], nonce[2], nonce[3]);
    state[13] = this.le32(nonce[4], nonce[5], nonce[6], nonce[7]);
    state[14] = this.le32(nonce[8], nonce[9], nonce[10], nonce[11]);
    state[15] = this.le32(nonce[12], nonce[13], nonce[14], nonce[15]);
    let temp = new Uint32Array(state.slice());
    for (let i = 1;i <= 10; i++) {
      this.Inner_Block(temp);
    }
    let B1 = temp.slice(0, 4);
    let B2 = temp.slice(12, 16);
    let B = new Uint32Array(B1.length + B2.length);
    B.set(B1);
    B.set(B2, B1.length);
    let Serialized_Block = [];
    for (let i = 0, i2 = 0;i < 8; i++) {
      Serialized_Block[i2++] = B[i] & 255;
      Serialized_Block[i2++] = B[i] >>> 8 & 255;
      Serialized_Block[i2++] = B[i] >>> 16 & 255;
      Serialized_Block[i2++] = B[i] >>> 24 & 255;
    }
    return Serialized_Block;
  }
  chacha20_encrypt(key, counter, nonce, plaintext) {
    let keystream = [];
    keystream.push(...this.Chacha20_BlockFunction(key, nonce, counter));
    let pos = 0;
    for (let i = 0;i < plaintext.length; i++) {
      if (pos === 64) {
        counter++;
        keystream.push(...this.Chacha20_BlockFunction(key, nonce, counter));
        pos = 0;
      }
      plaintext[i] = parseInt(plaintext[i].toString(), 16);
      pos++;
    }
    let cipherText = [];
    for (let i = 0;i < plaintext.length; i++) {
      cipherText[i] = plaintext[i] ^ keystream[i];
    }
    this.keystream = keystream;
    this.encryptedText = cipherText;
  }
  chacha20_decrypt(key, counter, nonce, eT) {
    let keystream = [];
    keystream.push(...this.Chacha20_BlockFunction(key, nonce, counter));
    let pos = 0;
    for (let i = 0;i < eT.length; i++) {
      if (pos === 64) {
        counter++;
        keystream.push(...this.Chacha20_BlockFunction(key, nonce, counter));
        pos = 0;
      }
      pos++;
    }
    let pT = [];
    for (let i = 0;i < this.encryptedText.length; i++) {
      pT[i] = this.encryptedText[i] ^ keystream[i];
    }
    this.plaintext = pT;
  }
  xchacha20_decrypt(key, encryptedText) {
    this.encryptedText = this.int2(XChaCha20.b64DecodeUnicode(encryptedText));
    let nonce = this.encryptedText.slice(-24);
    this.encryptedText = this.encryptedText.slice(0, -24);
    let subkey = this.HChacha20_BlockFunction(key, nonce.slice(0, 16));
    let chacha20_nonce = [0, 0, 0, 0];
    chacha20_nonce.push(...nonce.slice(16, 24));
    this.chacha20_decrypt(subkey, 0, chacha20_nonce, this.encryptedText);
  }
  xchacha20_encrypt(key, nonce, plaintext) {
    let subkey = this.HChacha20_BlockFunction(key, nonce.slice(0, 16));
    let chacha20_nonce = [0, 0, 0, 0];
    chacha20_nonce.push(...nonce.slice(16, 24));
    this.chacha20_encrypt(subkey, 0, chacha20_nonce, plaintext);
  }
  static convertToText(data) {
    let text = "";
    for (let i = 0;i < data.length; i++) {
      text += String.fromCharCode(data[i]);
    }
    return text;
  }
  static hexEncode(data) {
    let result = [];
    for (let i = 0;i < data.length; i++) {
      result.push(data.charCodeAt(i).toString(16));
    }
    return result;
  }
  static b64EncodeUnicode(str) {
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function toSolidBytes(match, p1) {
      return String.fromCharCode(Number("0x" + p1));
    }));
  }
  static b64DecodeUnicode(str) {
    return decodeURIComponent(atob(str).split("").map(function(c) {
      return "%" + ("00" + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(""));
  }
  static randomNonce() {
    let rand_n = new Uint8Array(24);
    globalThis.crypto.getRandomValues(rand_n);
    return rand_n;
  }
  static encrypt(message, secretKey) {
    const hexMessage = XChaCha20.hexEncode(message);
    const hexSecretKey = XChaCha20.hexEncode(secretKey);
    const nonce = XChaCha20.randomNonce();
    const xchacha = new XChaCha20;
    xchacha.xchacha20_encrypt(hexSecretKey, Array.from(nonce), hexMessage);
    xchacha.encryptedText.push(...Array.from(nonce));
    return XChaCha20.b64EncodeUnicode(XChaCha20.convertToText(xchacha.encryptedText));
  }
  static decrypt(message, secretKey) {
    const hexSecretKey = XChaCha20.hexEncode(secretKey);
    let d1 = new XChaCha20;
    d1.xchacha20_decrypt(hexSecretKey, message);
    return XChaCha20.convertToText(d1.plaintext);
  }
}

// src/passky-api.ts
class PasskyAPI {
  server;
  username;
  password;
  token = null;
  authenticationHash = null;
  encryptionHash = null;
  constructor(server, username, password) {
    this.server = server;
    this.username = username;
    this.password = password;
  }
  static async generateAuthenticationHash(username, password) {
    const authHash = blake2b_default.hash(`passky2020-${password}-${username}`);
    const authSalt = blake2b_default.hash(`passky2020-${username}`);
    try {
      return await argon2id_default.hash(authHash, authSalt, 4, 16, 3, 64);
    } catch {
      return null;
    }
  }
  async generateAuthenticationHash() {
    this.authenticationHash = await PasskyAPI.generateAuthenticationHash(this.username, this.password);
    return this.authenticationHash;
  }
  static async generateEncryptionHash(username, password) {
    const encHash = blake2b_default.hash(`${username}-${password}-passky2020`);
    const encSalt = blake2b_default.hash(`${username}-passky2020`);
    try {
      return await argon2id_default.hash(encHash, encSalt, 4, 16, 3, 64);
    } catch {
      return null;
    }
  }
  async generateEncryptionHash() {
    this.encryptionHash = await PasskyAPI.generateEncryptionHash(this.username, this.password);
    return this.encryptionHash;
  }
  static async getInfo(server) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    try {
      const result = await fetch(server + "?action=getInfo");
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async getStats(server) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    try {
      const result = await fetch(server + "?action=getStats");
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async getReport(server) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    try {
      const result = await fetch(server + "?action=getReport");
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async createAccount(server, username, authenticationHash, email) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.email(email))
      return errors_default.getJson(6 /* INVALID_EMAIL */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.hash(authenticationHash))
      return errors_default.getJson(1002 /* INVALID_HASH */);
    try {
      const data = new FormData;
      data.append("email", email);
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + authenticationHash));
      const result = await fetch(server + "?action=createAccount", {
        method: "POST",
        headers,
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async getToken(server, username, authenticationHash, otp = "") {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(1 /* INVALID_USERNAME */);
    if (!validate_default.hash(authenticationHash))
      return errors_default.getJson(1002 /* INVALID_HASH */);
    if (!validate_default.otp(otp))
      return errors_default.getJson(19 /* INVALID_OTP */);
    try {
      const data = new FormData;
      data.append("otp", otp);
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + authenticationHash));
      const result = await fetch(server + "?action=getToken", {
        method: "POST",
        headers,
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  async getToken(otp = "") {
    if (!this.authenticationHash)
      return errors_default.getJson(1002 /* INVALID_HASH */);
    const res = await PasskyAPI.getToken(this.server, this.username, this.authenticationHash, otp);
    if (!res.error)
      this.token = res.token;
    return res;
  }
  static async getPasswords(server, username, token) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(1 /* INVALID_USERNAME */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const result = await fetch(server + "?action=getPasswords", {
        method: "POST",
        headers
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  async getPasswords() {
    if (!this.token)
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    return await PasskyAPI.getPasswords(this.server, this.username, this.token);
  }
  static async savePassword(server, username, token, encryptionHash, passwordData) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(1 /* INVALID_USERNAME */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    if (!validate_default.hash(encryptionHash))
      return errors_default.getJson(1002 /* INVALID_HASH */);
    if (!validate_default.passwordWebsite(passwordData.website))
      return errors_default.getJson(300 /* WEBSITE_TOO_LONG */);
    if (!validate_default.passwordUsername(passwordData.username))
      return errors_default.getJson(301 /* USERNAME_TOO_LONG */);
    if (!validate_default.passwordPassword(passwordData.password))
      return errors_default.getJson(302 /* PASSWORD_TOO_LONG */);
    if (!validate_default.passwordMessage(passwordData.message))
      return errors_default.getJson(18 /* MESSAGE_TOO_LONG */);
    passwordData.website = XChaCha20.encrypt(passwordData.website, encryptionHash);
    passwordData.username = XChaCha20.encrypt(passwordData.username, encryptionHash);
    passwordData.password = XChaCha20.encrypt(passwordData.password, encryptionHash);
    passwordData.message = XChaCha20.encrypt(passwordData.message, encryptionHash);
    if (passwordData.website.length > 255)
      return errors_default.getJson(300 /* WEBSITE_TOO_LONG */);
    if (passwordData.username.length > 255)
      return errors_default.getJson(301 /* USERNAME_TOO_LONG */);
    if (passwordData.password.length > 255)
      return errors_default.getJson(302 /* PASSWORD_TOO_LONG */);
    if (passwordData.message.length > 1e4)
      return errors_default.getJson(18 /* MESSAGE_TOO_LONG */);
    try {
      const data = new FormData;
      data.append("website", passwordData.website);
      data.append("username", passwordData.username);
      data.append("password", passwordData.password);
      data.append("message", passwordData.message);
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const result = await fetch(server + "?action=savePassword", {
        method: "POST",
        headers,
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  async savePassword(passwordData) {
    if (!this.token)
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    if (!this.encryptionHash)
      return errors_default.getJson(1002 /* INVALID_HASH */);
    return await PasskyAPI.savePassword(this.server, this.username, this.token, this.encryptionHash, passwordData);
  }
  static async editPassword(server, username, token, encryptionHash, passwordData) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(1 /* INVALID_USERNAME */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    if (!validate_default.hash(encryptionHash))
      return errors_default.getJson(1002 /* INVALID_HASH */);
    if (!validate_default.positiveInteger(passwordData.id))
      return errors_default.getJson(10 /* PASSWORD_NOT_OWNED_BY_USER */);
    if (!validate_default.passwordWebsite(passwordData.website))
      return errors_default.getJson(300 /* WEBSITE_TOO_LONG */);
    if (!validate_default.passwordUsername(passwordData.username))
      return errors_default.getJson(301 /* USERNAME_TOO_LONG */);
    if (!validate_default.passwordPassword(passwordData.password))
      return errors_default.getJson(302 /* PASSWORD_TOO_LONG */);
    if (!validate_default.passwordMessage(passwordData.message))
      return errors_default.getJson(18 /* MESSAGE_TOO_LONG */);
    passwordData.website = XChaCha20.encrypt(passwordData.website, encryptionHash);
    passwordData.username = XChaCha20.encrypt(passwordData.username, encryptionHash);
    passwordData.password = XChaCha20.encrypt(passwordData.password, encryptionHash);
    passwordData.message = XChaCha20.encrypt(passwordData.message, encryptionHash);
    if (passwordData.website.length > 255)
      return errors_default.getJson(300 /* WEBSITE_TOO_LONG */);
    if (passwordData.username.length > 255)
      return errors_default.getJson(301 /* USERNAME_TOO_LONG */);
    if (passwordData.password.length > 255)
      return errors_default.getJson(302 /* PASSWORD_TOO_LONG */);
    if (passwordData.message.length > 1e4)
      return errors_default.getJson(18 /* MESSAGE_TOO_LONG */);
    try {
      const data = new FormData;
      data.append("password_id", passwordData.id.toString());
      data.append("website", passwordData.website);
      data.append("username", passwordData.username);
      data.append("password", passwordData.password);
      data.append("message", passwordData.message);
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const result = await fetch(server + "?action=editPassword", {
        method: "POST",
        headers,
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  async editPassword(passwordData) {
    if (!this.token)
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    if (!this.encryptionHash)
      return errors_default.getJson(1002 /* INVALID_HASH */);
    return await PasskyAPI.editPassword(this.server, this.username, this.token, this.encryptionHash, passwordData);
  }
  static async deletePassword(server, username, token, passwordID) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    if (!validate_default.positiveInteger(passwordID))
      return errors_default.getJson(10 /* PASSWORD_NOT_OWNED_BY_USER */);
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const data = new FormData;
      data.append("password_id", passwordID.toString());
      const result = await fetch(server + "?action=deletePassword", {
        method: "POST",
        headers,
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  async deletePassword(passwordID) {
    if (!this.token)
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    return await PasskyAPI.deletePassword(this.server, this.username, this.token, passwordID);
  }
  static async deletePasswords(server, username, token) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const result = await fetch(server + "?action=deletePasswords", {
        method: "POST",
        headers
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  async deletePasswords() {
    if (!this.token)
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    return await PasskyAPI.deletePasswords(this.server, this.username, this.token);
  }
  static async deleteAccount(server, username, token) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const result = await fetch(server + "?action=deleteAccount", {
        method: "POST",
        headers
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  async deleteAccount() {
    if (!this.token)
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    return await PasskyAPI.deleteAccount(this.server, this.username, this.token);
  }
  static async enable2FA(server, username, token) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const result = await fetch(server + "?action=enable2fa", {
        method: "POST",
        headers
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async disable2FA(server, username, token) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const result = await fetch(server + "?action=disable2fa", {
        method: "POST",
        headers
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async addYubiKey(server, username, token, yubiKeyOTP) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    if (!validate_default.yubiKey(yubiKeyOTP))
      return errors_default.getJson(23 /* INVALID_YUBIKEY_OTP */);
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const data = new FormData;
      data.append("id", yubiKeyOTP);
      const result = await fetch(server + "?action=addYubiKey", {
        method: "POST",
        headers,
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async removeYubiKey(server, username, token, yubiKeyOTP) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    if (!validate_default.yubiKey(yubiKeyOTP))
      return errors_default.getJson(23 /* INVALID_YUBIKEY_OTP */);
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const data = new FormData;
      data.append("id", yubiKeyOTP);
      const result = await fetch(server + "?action=removeYubiKey", {
        method: "POST",
        headers,
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async forgotUsername(server, email) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.email(email))
      return errors_default.getJson(6 /* INVALID_EMAIL */);
    try {
      const data = new FormData;
      data.append("email", email);
      const result = await fetch(server + "?action=forgotUsername", {
        method: "POST",
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async upgradeAccount(server, username, token, license) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    if (!validate_default.license(license))
      return errors_default.getJson(29 /* INVALID_LICENSE_KEY */);
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      const data = new FormData;
      data.append("license", license);
      const result = await fetch(server + "?action=upgradeAccount", {
        method: "POST",
        headers,
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
  static async importPasswords(server, username, token, encryptionHash, passwords) {
    if (!validate_default.url(server))
      return errors_default.getJson(1000 /* SERVER_UNREACHABLE */);
    if (!validate_default.username(username))
      return errors_default.getJson(12 /* INVALID_USERNAME_FORMAT */);
    if (!validate_default.token(token))
      return errors_default.getJson(25 /* INVALID_OR_EXPIRED_TOKEN */);
    if (!validate_default.hash(encryptionHash))
      return errors_default.getJson(1002 /* INVALID_HASH */);
    passwords.forEach((passwordData) => {
      passwordData.website = XChaCha20.encrypt(passwordData.website, encryptionHash);
      passwordData.username = XChaCha20.encrypt(passwordData.username, encryptionHash);
      passwordData.password = XChaCha20.encrypt(passwordData.password, encryptionHash);
      passwordData.message = XChaCha20.encrypt(passwordData.message, encryptionHash);
    });
    const importPasswords = [];
    passwords.forEach((passwordData) => {
      if (passwordData.website.length > 255)
        return;
      if (passwordData.username.length > 255)
        return;
      if (passwordData.password.length > 255)
        return;
      if (passwordData.message.length > 1e4)
        return;
      importPasswords.push(passwordData);
    });
    if (importPasswords.length === 0)
      return { error: 0, info: "success", import_success: 0, import_error: passwords.length };
    try {
      const headers = new Headers;
      headers.append("Authorization", "Basic " + btoa(username + ":" + token));
      headers.append("Content-Type", "application/json");
      const data = JSON.stringify(importPasswords);
      const result = await fetch(server + "?action=importPasswords", {
        method: "POST",
        headers,
        body: data
      });
      const response = await result.json();
      if (validate_default.response(response))
        return response;
      return errors_default.getJson(1001 /* UNKNOWN_ERROR */);
    } catch (err) {
      return errors_default.getJson(err instanceof SyntaxError ? 1001 /* INVALID_RESPONSE_FORMAT */ : 1000 /* SERVER_UNREACHABLE */);
    }
  }
}
export {
  XChaCha20,
  validate_default as Validate,
  PasskyAPI,
  errors_default as Errors,
  Error2 as Error
};
